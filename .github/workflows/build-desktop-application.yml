name: Build/Release

on: 
  push:
    branches:
      - 'nightly'

env:
  CI: false

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest, windows-latest]
        version: [latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.version }}
      - run: node --version
      - run: npm --version
      # - run: npm run install
      # - run: npm run compile
      # - run: npm run generate
      # - run: npm run build
      - run: npm run github-action-install
      - run: npm run github-action-compile-for-codegen
      - run: npm run github-action-generate
      - run: npm run github-action-compile
      - run: npm run github-action-pack
      - run: npm run github-action-build-react
      - run: npm run github-action-build-electron
      # - run: npm run desktop
      # - run: npm run electron
      - run: ls ./ocd/dist
        if: always()

      - name: Create Release
        if: matrix.os == 'macos-latest'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0.${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }} ${{ matrix.os }}
          draft: false
          prerelease: false
      - name: Get Release
        if: always()
        id: nightly_release
        uses: joutvhu/get-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0.${{ github.ref_name }}
      - name: Upload Mac Release Asset
        if: matrix.os == 'macos-latest'
        id: upload-mac-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/mac/ocd-0.1.0.dmg
          asset_name: ocd-0.1.0.dmg
          asset_content_type: application/octet-stream
      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        id: upload-win-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/win/ocd-0.1.0.exe
          asset_name: ocd-0.1.0.exe
          asset_content_type: application/x-msdownload

