name: Build/Release

on: 
  push:
    branches:
      - 'nightly'

env:
  CI: false
  RELEASE_TAG: 0.1.0-alpha.ocd.nightly

jobs:
  create-release: 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        version: [latest]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Release
        id: get_alpha_release
        run: |
          echo "upload_url=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/oracle/oci-designer-toolkit/releases/tags/v0.1.0-alpha.ocd.nightly --jq  '.upload_url')" >> $GITHUB_OUTPUT
          echo "id=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/oracle/oci-designer-toolkit/releases/tags/v0.1.0-alpha.ocd.nightly --jq  '.id')" >> $GITHUB_OUTPUT
      - name: Delete Release
        id: delete_alpha_release
        run: |
          gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/oracle/oci-designer-toolkit/releases/${{ steps.get_alpha_release.outputs.id }}
      - name: Create Mac Release
        if: success() || failure() && matrix.os == 'macos-latest'
        id: create_release_mac
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: OCD Alpha Nightly Release
          body_path: ./ocd/README.md
          draft: false
          prerelease: true
  
  build:
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest, windows-latest]
        version: [latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.version }}
      - run: node --version
      - run: npm --version
      - run: npm run github-action-install
      - run: npm run github-action-compile-for-codegen
      - run: npm run github-action-generate
      - run: npm run github-action-compile
      - run: npm run github-action-pack
      - run: npm run github-action-build-react
      - run: npm run github-action-build-electron
      - run: ls ./ocd/dist
        if: always()

      - name: Upload Mac Artifact
        if: matrix.os == 'macos-latest'
        id: upload-mac-release-artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.version }}
          path: ./ocd/dist/mac/ocd-0.1.0.dmg
          overwrite: true
          retention-days: 7
      - name: Upload Windows Artifact
        if: matrix.os == 'windows-latest'
        id: upload-win-release-artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.version }}
          path: ./ocd/dist/win/ocd-0.1.0.exe
          overwrite: true
          retention-days: 7
  
      - name: Create Mac Release
        if: matrix.os == 'macos-latest'
        id: create_release_mac
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0.${{ github.ref_name }}.${{ matrix.os }}
          release_name: Release ${{ github.ref_name }} ${{ matrix.os }}
          body_path: ./ocd/README.md
          draft: false
          prerelease: false
      - name: Upload Mac Release Asset
        if: matrix.os == 'macos-latest'
        id: upload-mac-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_mac.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/mac/ocd-0.1.0.dmg
          asset_name: ocd-0.1.0.dmg
          asset_content_type: application/octet-stream

      - name: Create Windows Release
        if: matrix.os == 'windows-latest'
        id: create_release_win
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0.${{ github.ref_name }}.${{ matrix.os }}
          release_name: Release ${{ github.ref_name }} ${{ matrix.os }}
          body_path: ./ocd/README.md
          draft: false
          prerelease: false
      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        id: upload-win-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_win.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/win/ocd-0.1.0.exe
          asset_name: ocd-0.1.0.exe
          asset_content_type: application/x-msdownload

  release:
    needs: [create-release, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest, windows-latest]
        version: [latest]
    steps:
      - name: Get Release
        id: get_alpha_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "upload_url=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/oracle/oci-designer-toolkit/releases/tags/${{ env.RELEASE_TAG }} --jq  '.upload_url')" >> $GITHUB_OUTPUT
          echo "id=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/oracle/oci-designer-toolkit/releases/tags/${{ env.RELEASE_TAG }} --jq  '.id')" >> $GITHUB_OUTPUT
          
      - name: Upload Mac Release Asset
        if: matrix.os == 'macos-latest'
        id: upload-mac-release-asset-to-alpha 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_alpha_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/mac/ocd-0.1.0.dmg
          asset_name: ocd-0.1.0.dmg
          asset_content_type: application/octet-stream
          
      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        id: upload-windows-release-asset-to-alpha 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_alpha_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ocd/dist/win/ocd-0.1.0.exe
          asset_name: ocd-0.1.0.exe
          asset_content_type: application/x-msdownload
  