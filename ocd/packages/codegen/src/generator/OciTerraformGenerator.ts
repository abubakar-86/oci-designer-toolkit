/*
** Copyright (c) 2020, 2023, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/
// TODO: Remove Following
// @ts-nocheck

import { OcdCodeGenerator } from './OcdCodeGenerator.js'

export class OciTerraformGenerator extends OcdCodeGenerator {
    constructor () {
        super()
        this.ignoreAttributes = [...this.commonElements, ...this.commonIgnoreElements]
    }

    /*
    ** Content for the top level file. This will only be created if it does not exists.
    */
   content = (resource: string, schema) => {
    const schemaObjects = this.getSchemaObjects(schema)
    const contents = `${this.copyright()}

import * as AutoGenerated from "./${this.generatedDirectory()}/${this.interfaceName(resource)}"

export class ${this.resourceName(resource)} extends AutoGenerated.${this.autoGeneratedResourceName(resource)} {}

export default ${this.resourceName(resource)}
`
    return contents
   }

    /*
    ** Content for the auto generated file this will be written on each execution.
    */
    autoGeneratedContent = (resource: string, schema) => {
        const schemaObjects = this.getSchemaObjects(schema)
        const contents = `${this.copyright()}
${this.autoGeneratedWarning()}

import { OciTerraformResource } from '../../OciTerraformResource'
import { OciModelResources as Model } from '@ocd/model'

export class ${this.autoGeneratedResourceName(resource)} extends OciTerraformResource {
    resource: Model.${this.interfaceName(resource)}
    constructor(resource: Model.${this.interfaceName(resource)}, idTFResourceMap: Record<string, string> = {}) {
        super(idTFResourceMap)
        this.resource = resource
    }

    /*
    ** Generate Terraform Resource / Data Statement(s)
    */
    generate = (resource: Model.${this.interfaceName(resource)} | undefined) => {
        resource = resource ? resource : this.resource
        if (resource.locked) {
            return this.generateData(resource)
        } else {
            return this.generateResource(resource)
        }
    }

    generateResource = (resource: Model.${this.interfaceName(resource)} ) => {
        const content = \`
# ------ Create ${this.toTitleCase(resource)}
resource "${schema.tf_resource}" "\${resource.terraformResourceName}" {
    \${this.commonAssignments(resource)}
    ${Object.entries(schema.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(k)).map(([k, a]) => this.attributeAssignment(resource, k, a)).join('\n    ')}
}

locals {
    \${resource.terraformResourceName}_id = ${schema.tf_resource}.\${resource.terraformResourceName}.id
}
\`
    return content
    }

    generateData = (resource: Model.${this.interfaceName(resource)} ) => {
        const content = \`
# ------ Read ${this.toTitleCase(resource)}
data "${schema.tf_resource}s" "\${resource.terraformResourceName}" {
    # Required
    compartment_id = "\${resource.compartmentId}"
    filter {
        name = "id"
        values = ["\${resource.id}"]
    }
}

locals {
    \${resource.terraformResourceName}_id = "\${resource.id}"
    \${resource.terraformResourceName}_ocid = "\${resource.id}"
}
\`
    return content
    }
}

export default ${this.autoGeneratedResourceName(resource)}
`
        return contents
    }

    attributeAssignment = (resource, name, attribute) => {
        if (attribute.type === 'string' && attribute.lookup) return `\${this.generateReferenceAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required})}`
        else if (attribute.type === 'string')                return `\${this.generateTextAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required})}`
        else if (attribute.type === 'bool')                  return `\${this.generateBooleanAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required})}`
        else if (attribute.type === 'number')                return `\${this.generateNumberAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required})}`
        // else if (attribute.type === 'object') return `${this.toCamelCase(name)}: ${this.autoGeneratedNamespaceName(resource)}.${this.namespaceFunctionName(name)}()`
        // else if (attribute.type === 'list')   return `${this.toCamelCase(name)}: []`
        // else if (attribute.type === 'set')    return `${this.toCamelCase(name)}: []`
        // else if (attribute.type === 'map')    return `${this.toCamelCase(name)}: {}`
        else return `# ${this.toCamelCase(name)} Type ${attribute.type} Required ${attribute.required}`
    }

    outputFilename = (resource: string) => `${this.terraformFilename(resource)}.ts`

}

export default OciTerraformGenerator
module.exports = { OciTerraformGenerator }
