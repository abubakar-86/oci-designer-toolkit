/*
** Copyright (c) 2020, 2023, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/
// TODO: Remove Following
// @ts-nocheck

import { OcdCodeGenerator } from './OcdCodeGenerator.js'
import { OcdUtils } from '@ocd/core'

export class OcdMarkdownGenerator extends OcdCodeGenerator {
    constructor () {
        super()
        this.ignoreAttributes = [...this.commonElements, ...this.commonIgnoreElements]
    }

    /*
    ** Content for the top level file. This will only be created if it does not exists.
    */
    content = (resource: string, schema) => {
        const schemaObjects = this.getSchemaObjects(schema)
        const contents = `${this.copyright()}
    
    import * as AutoGenerated from "./${this.generatedDirectory()}/${this.interfaceName(resource)}"
    
    export class ${this.resourceName(resource)} extends AutoGenerated.${this.autoGeneratedResourceName(resource)} {}
    
    export default ${this.resourceName(resource)}
    `
        return contents
       }
    
        /*
        ** Content for the auto generated file this will be written on each execution.
        */
        autoGeneratedContent = (resource: string, schema) => {
            const schemaObjects = this.getSchemaObjects(schema)
            const schemaAttributes = this.getSchemaAttributes(schema)
            const cacheLookupAttributes = schemaAttributes.filter((a) => a.cacheLookup)
            const contents = `${this.copyright()}
${this.autoGeneratedWarning()}
/* eslint-disable @typescript-eslint/no-unused-vars */

import { OciMarkdownResource } from '../../OciMarkdownResource'
import { OciModelResources as Model } from '@ocd/model'

export class ${this.autoGeneratedResourceName(resource)} extends OciMarkdownResource {
    resource: Model.${this.interfaceName(resource)}
    constructor(resource: Model.${this.interfaceName(resource)}) {
        super(idTFResourceMap, isHomeRegion, isIgnoreCompartmentId)
        this.resource = resource
        this.terraformResourceName = resource.terraformResourceName
    }
}

export default ${this.autoGeneratedResourceName(resource)}
`
            return contents
        }
            
    outputFilename = (resource: string) => `${this.terraformFilename(resource)}.ts`
}

export default OcdMarkdownGenerator
module.exports = { OcdMarkdownGenerator }
