"use strict";
/*
** Copyright (c) 2020, 2023, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/
// TODO: Remove Following
// @ts-nocheck
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OcdReferenceDataGenerator = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const codegen_1 = require("@ocd/codegen");
const query_1 = require("@ocd/query");
class OcdReferenceDataGenerator extends codegen_1.OcdCodeGenerator {
    constructor() {
        super();
        this.ignoreAttributes = [...this.commonElements, ...this.commonIgnoreElements];
    }
    generate(resource, schema) { }
    content = (resource, schema) => { return ''; };
    autoGeneratedContent = (resource, schema) => { return ''; };
    writeFiles(outputDirectory, resource, force = false) {
        const outputFilename = 'DefaultCache.ts';
        const resourceFilename = path_1.default.join(outputDirectory, outputFilename);
        const referenceDataQuery = new query_1.OciReferenceDataQuery();
        referenceDataQuery.query().then((results) => {
            console.debug('Reference Data');
            const content = `${this.copyright()}
${this.autoGeneratedWarning()}

import { OcdCache } from "../components/OcdCache";

export const defaultCache: OcdCache = {
    profile: 'DEFAULT',
    region: '',
    dropdownData: {
        shipped: {
            all: ${JSON.stringify(results, null, 4)}
        }
    }
}

export default defaultCache

`;
            // console.debug('Default Cache', content)
            // console.debug('Default Cache Filename', resourceFilename)
            if (force || !fs_1.default.existsSync(resourceFilename)) {
                console.info(`Writting Resource File : ${resourceFilename}`);
                fs_1.default.writeFileSync(resourceFilename, content);
            }
            else {
                console.info(`Resource File already exists : ${resourceFilename}`);
            }
        });
    }
    writeResourceFiles(outputDirectory, resource, force = false) { }
    writeGeneratedResourceFiles(outputDirectory, resource, force = false) { }
}
exports.OcdReferenceDataGenerator = OcdReferenceDataGenerator;
exports.default = OcdReferenceDataGenerator;
module.exports = { OcdReferenceDataGenerator: OcdReferenceDataGenerator };
